<?xml version="1.0"?>
<!DOCTYPE bindings [
<!ENTITY % panoToolbarDTD SYSTEM "chrome://pano-toolbar/locale/toolbar.dtd" >
%panoToolbarDTD;
]>
<bindings id="panoTabGroupBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">
  <binding id="tabgroup-tabs"
           extends="chrome://global/content/bindings/tabbox.xml#tabs">
    <resources>
      <stylesheet src="chrome://browser/content/tabbrowser.css"/>
    </resources>

    <content>
      <xul:hbox align="end">
        <xul:image class="tab-drop-indicator" anonid="tab-drop-indicator" collapsed="true"/>
      </xul:hbox>
      <xul:arrowscrollbox anonid="arrowscrollbox" orient="horizontal" flex="1"
                          style="min-width: 1px;"
                          clicktoscroll="true"
                          class="tabbrowser-arrowscrollbox">
        <children includes="tab"/>
        <children/>
        <xul:toolbarbutton class="tabs-newtab-button"
                           oncommand="this.parentNode.parentNode.newGroup();"
                           tooltiptext="&newGroup.tooltip;"/>
        <xul:spacer class="closing-tabs-spacer" anonid="closing-tabs-spacer"
                    style="width: 0;"/>
      </xul:arrowscrollbox>
    </content>
    <implementation implements="nsIDOMEventListener">
      <constructor><![CDATA[
        TabView._initFrame(this.rebuild.bind(this));

        for (let [, type] in Iterator(["tabviewhidden","TabGroupAdded","TabGroupClose","TabSelect","TabGroupTitleChanged"])) {
          window.addEventListener(type, this, false);
        }
      ]]></constructor>

      <destructor><![CDATA[
        for (let [, type] in Iterator(["tabviewhidden","TabGroupAdded","TabGroupClose","TabSelect","TabGroupTitleChanged"])) {
          window.removeEventListener(type, this, false);
        }
      ]]></destructor>

      <field name="mScrollBox">
        document.getAnonymousElementByAttribute(this, "anonid", "arrowscrollbox");
      </field>

      <property name="selectedIndex">
        <getter><![CDATA[
          const tabs = this.childNodes;
          for (var i = 0; i < tabs.length; i++) {
            if (tabs[i].selected)
              return i;
          }
          return -1;
        ]]></getter>
        <setter><![CDATA[
          var tab = this.getItemAtIndex(val);
          if (tab) {
            var alreadySelected = tab.selected;

            Array.forEach(this.childNodes, function (aTab) {
              if (aTab.selected && aTab != tab)
                aTab._selected = false;
            });
            tab._selected = true;

            this.setAttribute("value", tab.value);

            this.mScrollBox.ensureElementIsVisible(tab);

            if (TabView._window) {
              let tabViewWindow = TabView._window;
              var group = tabViewWindow.GroupItems.groupItem(tab.value);
              if (tabViewWindow.GroupItems._activeGroupItem !== group) {
                tabViewWindow.UI.setActive(group, { dontSetActiveTabInGroup: true });
                if (!gBrowser.selectedTab.pinned) {
                  let item = group.getActiveTab() || group._children[0];
                  gBrowser.mTabContainer.selectedIndex = item.tab._tPos;
                } else {
                  tabViewWindow.UI.onTabSelect(gBrowser.selectedTab);
                }
              }
            }

            if (!alreadySelected) {
              // Fire an onselect event for the tabs element.
              var event = document.createEvent('Events');
              event.initEvent('select', true, true);
              this.dispatchEvent(event);
            }
          }
          return val;
        ]]></setter>
      </property>
      <method name="rebuild">
        <body><![CDATA[
          var win = TabView._window,
              self = this;
          if (!win)
            return;

          if (win.TabItems.reconnectingPaused()) {
            window.addEventListener("SSWindowStateReady", function PT_onSSWindowStateReady (aEvent) {
              window.removeEventListener(aEvent.type, PT_onSSWindowStateReady, false);
              self.rebuild();
            }, false);
            return;
          }
          while (this.childNodes.length > 1) {
            this.removeChild(self.lastChild);
          }
          var groupItems = win.GroupItems.groupItems;
          this.setGroup(this.childNodes[0], groupItems[0]);
          if (groupItems[0] === win.GroupItems._activeGroupItem)
            this.selectedIndex = 0;

          for (let i = 1, len = groupItems.length; i < len; ++i) {
            this.addGroup(groupItems[i]);
          }
          this.mScrollBox.ensureElementIsVisible(this.selectedItem);
        ]]></body>
      </method>
      <method name="setGroup">
        <parameter name="aTab"/>
        <parameter name="aGroup"/>
        <body><![CDATA[
          var title = typeof aGroup.getTitle === "function" ? aGroup.getTitle() : aGroup.title,
              id = aGroup.id;
          aTab.setAttribute("label", title || "- " + id + " -");
          aTab.setAttribute("value", id);
          aTab.setAttribute("crop", "end");
        ]]></body>
      </method>
      <method name="addGroup">
        <parameter name="group"/>
        <body><![CDATA[
          var tab = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "tab");
          this.setGroup(tab, group);
          tab.setAttribute("class", "pano-tabgroup-tab");
          this.appendChild(tab);
          if (TabView._window && TabView._window.GroupItems._activeGroupItem.id == group.id)
            this.selectedItem = tab;
        ]]></body>
      </method>
      <method name="newGroup">
        <body><![CDATA[
          TabView._initFrame(function(){
            TabView._window.GroupItems.newGroup().newTab();
          });
        ]]></body>
      </method>
      <method name="getItemFromGroupId">
        <parameter name="aGroupId"/>
        <body><![CDATA[
          for (let i = 0, len = this.childNodes.length; i < len; ++i) {
            if (this.childNodes[i].value == aGroupId)
              return this.childNodes[i];
          }
          return null;
        ]]></body>
      </method>
      <method name="handleEvent">
        <parameter name="aEvent"/>
        <body><![CDATA[
          switch (aEvent.type) {
            case "tabviewhidden":
              this.onTabViewHidden(aEvent);
              break;
            case "TabGroupAdded":
              this.onTabGroupAdded(aEvent);
              break;
            case "TabGroupClose":
              this.onTabGroupClose(aEvent);
              break;
            case "TabSelect":
              this.onTabSelect(aEvent);
              break;
            case "TabGroupTitleChanged":
              this.onTabGroupTitleChanged(aEvent);
              break;
          }
        ]]></body>
      </method>
      <method name="onTabViewHidden">
        <parameter name="aEvent"/>
        <body><![CDATA[
          this.rebuild();
        ]]></body>
      </method>
      <method name="onTabGroupAdded">
        <parameter name="aEvent"/>
        <body><![CDATA[
          var groupItems = TabView._window.GroupItems.groupItems,
              group = groupItems[groupItems.length - 1];
          this.addGroup(group);
        ]]></body>
      </method>
      <method name="onTabGroupClose">
        <parameter name="aEvent"/>
        <body><![CDATA[
          var groupId = aEvent.detail;
          for (let i = 0, len = this.childNodes.length; i < len; ++i) {
            if (this.childNodes[i].value == groupId) {
              this.removeItemAt(i);
              return;
            }
          }
        ]]></body>
      </method>
      <method name="onTabSelect">
        <parameter name="aEvent"/>
        <body><![CDATA[
          var tab = aEvent.target;
          if (tab.pinned) {
            return;
          }
          if (!tab._tabViewTabItem)
            return;

          var group = tab._tabViewTabItem.parent;
          var item = this.getItemFromGroupId(group.id);
          if (item) {
            this.selectedItem = item;
          } else {
            this.addGroup(group);
          }
        ]]></body>
      </method>
      <method name="onTabGroupTitleChanged">
        <parameter name="aEvent"/>
        <body><![CDATA[
          var id = aEvent.detail;
          var item = this.getItemFromGroupId(id),
              group = TabView._window.GroupItems.groupItem(id);
          if (item && group) {
            item.label = group.getTitle() || "- " + id + " -";
          }
        ]]></body>
      </method>
    </implementation>
  </binding>

  <binding id="tabgroup-tab" display="xul:hbox"
           extends="chrome://global/content/bindings/tabbox.xml#tab">
    <content>
      <xul:hbox class="tab-middle box-inherit" xbl:inherits="align,dir,pack,orient,selected" flex="1">
        <xul:image class="tab-icon"
                   xbl:inherits="validate,src=image"
                   role="presentation"/>
        <xul:deck anonid="title-deck" selectedIndex="1" flex="1">
          <xul:textbox flex="1" anonid="title-textbox" class="tabgroup-title-textbox"/>
          <xul:label xbl:inherits="value=label,accesskey,crop,disabled"
                     flex="1"
                     role="presentation"/>
        </xul:deck>
        <xul:toolbarbutton anonid="close-button"
                           xbl:inherits="selected,value"
                           oncommand="this.parentNode.parentNode.close(event);"
                           clickthrough="never"
                           class="tabgroup-closebutton"/>
      </xul:hbox>
    </content>
    <implementation>
      <field name="mOverCloseButton">false</field>
      <field name="mDeck">
        document.getAnonymousElementByAttribute(this, "anonid", "title-deck")
      </field>
      <field name="mTextbox">
        document.getAnonymousElementByAttribute(this, "anonid", "title-textbox")
      </field>
      <method name="close">
        <parameter name="aEvent"/>
        <body><![CDATA[
          aEvent.stopPropagation();
          if (this.selected) {
            let tab = this.nextElementSibling || this.previousElementSibling;
            if (tab) {
              this.parentNode.selectedItem = tab;
            }
          }
          var id = this.value;
          var GI = TabView._window.GroupItems;
          var group = GI.groupItem(id);
          group.closeHidden();
        ]]></body>
      </method>
    </implementation>
    <handlers>
      <handler event="mouseover">
        var anonid = event.originalTarget.getAttribute("anonid");
        if (anonid == "close-button")
          this.mOverCloseButton = true;
      </handler>
      <handler event="mouseout">
        var anonid = event.originalTarget.getAttribute("anonid");
        if (anonid == "close-button")
          this.mOverCloseButton = false;
      </handler>
      <handler event="dragstart" phase="capturing">
        this.style.MozUserFocus = '';
      </handler>
      <handler event="mousedown" phase="capturing">
      <![CDATA[
        if (this.selected) {
          this.style.MozUserFocus = 'ignore';
          this.clientTop; // just using this to flush style updates
        } else if (this.mOverCloseButton) {
          // Prevent tabbox.xml from selecting the tab.
          event.stopPropagation();
        }
      ]]>
      </handler>
      <handler event="mouseup">
        this.style.MozUserFocus = '';
      </handler>
      <handler event="dblclick" button="0"><![CDATA[
        this.mDeck.selectedIndex = 0;
        this.mTextbox.value = this.label;
        this.mTextbox.focus();
      ]]></handler>
      <handler event="keypress"><![CDATA[
        if (this.mDeck.selectedIndex == 1)
          return;

        switch (event.keyCode) {
          case KeyEvent.DOM_VK_ENTER:
          case KeyEvent.DOM_VK_RETURN:
          case KeyEvent.DOM_VK_ESCAPE:
            this.mTextbox.blur();
            this.mDeck.selectedIndex = 1;
            let label = this.mTextbox.value;
            this.label = label;
            TabView._window.GroupItems.groupItem(this.value).setTitle(label);
        }
      ]]></handler>
    </handlers>
  </binding>
</bindings>

